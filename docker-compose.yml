version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    networks: 
      - my_network

  kafka:
    image: wurstmeister/kafka
    restart: always
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"  
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./data/kafka:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    networks: 
      - my_network
  db:
    image: mysql:latest
    restart: always
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_DATABASE: "lab4" 
      MYSQL_USER: "nasi"  
      MYSQL_PASSWORD: "5121381Nz!"  
      # TZ: "America/Vancouver"
    ports:
      - "3307:3306"
    volumes:
      - ./data/database:/var/lib/mysql
    networks: 
      - my_network
  receiver:
    restart: always
    build:
      context: receiver
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - kafka
      - storage
    volumes:
      - ./config/receiver_config.yml:/app/receiver_config.yml
      - ./config/log_config.yml:/app/log_config.yml
      # - ./logs/receiver.log:/app/app.log
    networks: 
      - my_network

  storage:
    restart: always
    build:
      context: storage
      dockerfile: Dockerfile
    ports:
      - "8090"
    depends_on:
      - db
      - kafka
    volumes:
      - ./config/storage_config.yml:/app/app_conf.yml
      - ./config/log_config.yml:/app/conf_log.yml
      # - ./logs/storage.log:/app/app.log
    networks: 
      - my_network

  processing:
    restart: always
    build:
      context: processing
      dockerfile: Dockerfile
    ports:
      - "8100:8100"
    depends_on:
      - storage
    volumes:
      - ./config/processing_config.yml:/app/app_conf.yml
      - ./config/log_config.yml:/app/conf_log.yml
      # - ./logs/processing.log:/app/app.log
      - ./data/processing:/app/data
    networks: 
      - my_network

  analyzer:
    restart: always
    build:
      context: analyzer
      dockerfile: Dockerfile
    ports:
      - "8110:8110"
    depends_on:
      - kafka
    volumes:
      - ./config/analyzer_config.yml:/app/app_conf.yml
      - ./config/log_config.yml:/app/conf_log.yml
      # - ./logs/analyzer.log:/app/app.log
    networks: 
      - my_network
    
  
volumes:
  zookeeper_data:

networks:
  my_network:
    driver: bridge



